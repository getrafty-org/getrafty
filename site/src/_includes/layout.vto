<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="supported-color-schemes" content="light dark">
    <meta name="theme-color" content="hsl(220, 20%, 100%)" media="(prefers-color-scheme: light)">
    <meta name="theme-color" content="hsl(220, 20%, 10%)" media="(prefers-color-scheme: dark)">

    <link id="highlight-theme" rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css">
    <link rel="stylesheet" href="/static/main.css">
    <link rel="stylesheet" href="/static/icomoon.css">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/img/rafty64.webp">
    <link rel="canonical" href="{{ url |> url(true) }}">
    <title>Getrafty.org</title>
</head>

<body>
<header>
    <nav class="navbar">
        <ul class="navbar-links">
            <li>
                <button class="button theme-toggle">
                    <a class="icon icon-magic" aria-hidden="true"></a>
                </button>
            </li>
            <li>
                <button class="button">
                    <a class="icon icon-github" aria-hidden="true"
                       href="https://github.com/sidosera/getrafty/blob/main/site/src/"
                       target="_blank"></a>
                </button>
            </li>
        </ul>
    </nav>
</header>

<main>
    <a href="/index">cd ~/</a>
    {{ content }}
</main>

<!-- Place scripts at the end for better performance -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/bash.min.js"></script>
<script>
    const themes = {
        light: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css',
        dark: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css'
    };
    const darkBackgroundColor = { r: 13, g: 17, b: 23 };
    const whiteThreshold = 230;

    window.addEventListener('load', async () => {
        let theme = localStorage.getItem('theme') || (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");

        await setThemeAsync(theme);
        document.querySelector('.theme-toggle').addEventListener('click', toggleTheme);

        addAnchorsToHeaders();
    });

    async function setThemeAsync(currentTheme) {
        document.documentElement.dataset.theme = currentTheme;
        localStorage.setItem('theme', currentTheme);
        document.getElementById('highlight-theme').href = themes[currentTheme];

        const images = Array.from(document.querySelectorAll('img'));
        await setupImageCanvasesAsync(images, currentTheme);

        requestAnimationFrame(() => hljs.highlightAll());  // Syntax highlighting after canvas processing
    }

    async function setupImageCanvasesAsync(images, theme) {
        await Promise.all(images.map(image => setupImageCanvasAsync(image, theme)));
    }

    async function setupImageCanvasAsync(image, theme) {
        if (!image.dataset.originalSrc) image.dataset.originalSrc = image.src;

        let canvas = image.nextElementSibling?.tagName === 'CANVAS' ? image.nextElementSibling : createCanvasForImage(image);
        const ctx = canvas.getContext('2d');
        canvas.width = image.naturalWidth;
        canvas.height = image.naturalHeight;

        if (theme === "dark") {
            ctx.drawImage(image, 0, 0);
            applyDarkModeFilter(ctx);
            toggleDisplay(canvas, image);
        } else {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(image, 0, 0);
            toggleDisplay(image, canvas);
        }
    }

    function toggleTheme() {
        let theme = document.documentElement.dataset.theme === "dark" ? "light" : "dark";
        setThemeAsync(theme);
    }

    function addAnchorsToHeaders() {
        document.querySelectorAll("h1, h2, h3").forEach(header => {
            if (!header.id) {
                const slug = header.textContent.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]/g, '');
                header.id = slug;

                const anchor = document.createElement('a');
                anchor.href = `#${slug}`;
                anchor.className = 'anchor-link';
                anchor.textContent = header.textContent;

                header.textContent = '';
                header.appendChild(anchor);
            }
        });
    }

    function createCanvasForImage(image) {
        const canvas = document.createElement('canvas');
        canvas.className = 'imageCanvas';
        const styles = getComputedStyle(image);
        Object.assign(canvas.style, {
            width: `${image.width}px`,
            height: `${image.height}px`,
            display: 'block',
            objectFit: styles.objectFit,
            maxWidth: styles.maxWidth,
            maxHeight: styles.maxHeight
        });
        image.parentNode.insertBefore(canvas, image.nextSibling);
        return canvas;
    }

    function applyDarkModeFilter(ctx) {
        const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
        const data = imageData.data;

        for (let i = 0; i < data.length; i += 4) {
            if (data[i] > whiteThreshold && data[i + 1] > whiteThreshold && data[i + 2] > whiteThreshold) {
                data[i] = darkBackgroundColor.r;
                data[i + 1] = darkBackgroundColor.g;
                data[i + 2] = darkBackgroundColor.b;
            } else {
                data[i] = 255 - data[i];
                data[i + 1] = 255 - data[i + 1];
                data[i + 2] = 255 - data[i + 2];
            }
        }

        ctx.putImageData(imageData, 0, 0);
    }

    function toggleDisplay(showElement, hideElement) {
        showElement.style.display = 'block';
        hideElement.style.display = 'none';
    }
</script>
</body>
</html>
